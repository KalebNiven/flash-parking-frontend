{"version":3,"sources":["img/flash_parking_logo-1.png","App.js","serviceWorker.js","index.js"],"names":["App","props","getParkingLot","lot","a","URL","state","REACT_APP_URL","fetch","method","response","json","myJson","console","log","setState","parkingLotID","carsInLot","spotsAvailable","totalParkingSpots","arrival","parkingLot","options","body","JSON","stringify","headers","departure","process","bind","this","className","src","flashParkingLogo","alt","id","type","onClick","disabled","Component","Boolean","window","location","hostname","match","ReactDOM","render","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.57d9ac94.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/flash_parking_logo-1.0cde0285.png\";","import React, { Component } from 'react';\r\nimport flashParkingLogo from './img/flash_parking_logo-1.png'\r\nimport './App.css'\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n          carsInLot: 0,\r\n          totalParkingSpots: 0,\r\n          spotsAvailable: 0,\r\n          parkingLotID: '',\r\n          REACT_APP_URL: process.env.REACT_APP_PROD_URL\r\n        }\r\n        this.getParkingLot = this.getParkingLot.bind(this);\r\n        this.arrival = this.arrival.bind(this);\r\n        this.departure = this.departure.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        let lot = 'C3' // set the lot ID here \r\n        this.getParkingLot(lot)\r\n        \r\n          \r\n    }\r\n\r\n    getParkingLot = async (lot) => {\r\n        //call api\r\n        let URL = this.state.REACT_APP_URL\r\n        \r\n        \r\n        const response = await fetch(URL+'getParkingLot?lot='+lot,{\r\n            method: 'GET',\r\n        });\r\n        const myJson = await response.json(); //extract JSON from the http response\r\n        // do something with myJson\r\n        console.log(\"testAPI response: \", myJson);\r\n        this.setState({\r\n            parkingLotID: myJson['ID'],\r\n            carsInLot: myJson['carsInLot'],\r\n            spotsAvailable: myJson['spotsAvailable'],\r\n            totalParkingSpots: myJson['totalParkingSpots']\r\n        })\r\n    }\r\n\r\n    arrival = async () => {\r\n\t\t//POST body\r\n        let parkingLot = {\r\n            parkingLotID: this.state.parkingLotID,\r\n            carsInLot: this.state.carsInLot,\r\n            spotsAvailable: this.state.spotsAvailable,\r\n            totalParkingSpots: this.state.totalParkingSpots\r\n\t\t}\r\n\t\t//headers\r\n        const options = {\r\n            method: 'POST',\r\n            body: JSON.stringify(parkingLot),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n        //call api\r\n        const response = await fetch(this.state.REACT_APP_URL+'arrival', options);\r\n        const myJson = await response.json(); //extract JSON from the http response\r\n        // do something with myJson\r\n        console.log(\"arrival response: \", myJson);\r\n        this.setState({\r\n            carsInLot: myJson['carsInLot'],\r\n            spotsAvailable: myJson['spotsAvailable'],\r\n            totalParkingSpots: myJson['totalParkingSpots']\r\n        })\r\n    }\r\n\r\n    departure = async () => {\r\n\t\t//POST body\r\n        let parkingLot = {\r\n            parkingLotID: this.state.parkingLotID,\r\n            carsInLot: this.state.carsInLot,\r\n            spotsAvailable: this.state.spotsAvailable,\r\n            totalParkingSpots: this.state.totalParkingSpots\r\n\t\t}\r\n\t\t//headers\r\n        const options = {\r\n            method: 'POST',\r\n            body: JSON.stringify(parkingLot),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n\t\t}\r\n\t\t//call api\r\n        const response = await fetch(this.state.REACT_APP_URL+'departure', options);\r\n        const myJson = await response.json(); //extract JSON from the http response\r\n        // do something with myJson\r\n        console.log(\"departure response: \", myJson);\r\n        this.setState({\r\n            carsInLot: myJson['carsInLot'],\r\n            spotsAvailable: myJson['spotsAvailable'],\r\n            totalParkingSpots: myJson['totalParkingSpots']\r\n        })\r\n    }\r\n\r\n\r\n    render(props) {\r\n        return (\r\n            <div>\r\n            \r\n            <div className=\"main\">\r\n            <img src={flashParkingLogo} alt=\"this is the flash parking logo\" />\r\n                    <div className=\"container\">\r\n                        <div className=\"welcome-font\">\r\n                            {process.env.NODE_ENV === 'development' ? process.env.REACT_APP_DEV_MODE : process.env.REACT_APP_PRO_MODE}\r\n                        </div>\r\n                            \r\n                        <div className=\"vertical-center\">\r\n\t\t\t\t\t\t\t{this.state.spotsAvailable <= 0 ? <div className=\"row \">\r\n\t\t\t\t\t\t\t\t<h2 className=\"warning-font font-weight-bold \" id=\"edit-welcome-text\">PARKING LOT IS FULL!</h2>\r\n\t\t\t\t\t\t\t</div> \r\n\t\t\t\t\t\t\t: \r\n\t\t\t\t\t\t\tnull\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n                            <div className=\"row \">\r\n                                <p className=\"welcome-font font-weight-bold \" id=\"edit-welcome-text\">WELCOME TO PARKING LOT: {this.state.parkingLotID}</p>\r\n                            </div>\r\n                            <div className=\"row mt-3\">\r\n                                <p className=\"welcome-font \" id=\"parking-spots-avilable-text\" >Number of spots available: {this.state.spotsAvailable} / {this.state.totalParkingSpots}</p>\r\n                            </div>\r\n                            <div className=\"row\">\r\n\t\t\t\t\t\t\t\t{this.state.spotsAvailable > 0 ?\r\n                                <button type=\"button\" className=\"btn btn-lg mr-4\" onClick={() =>this.arrival()}>ARRIVAL</button>\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t<button type=\"button\" className=\"btn btn-lg mr-4\" disabled onClick={() =>this.arrival()}>ARRIVAL</button>}\r\n\r\n                                {this.state.spotsAvailable < this.state.totalParkingSpots ?\r\n\t\t\t\t\t\t\t\t<button className=\"btn btn-lg\" onClick={() =>this.departure()}>DEPARTURE</button>\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t<button className=\"btn btn-lg\" disabled onClick={() =>this.departure()}>DEPARTURE</button>\r\n\t\t\t\t\t\t\t\t}\r\n                            </div>\r\n                        </div>\r\n                    \r\n                        \r\n                    \r\n                    \r\n                    \r\n                    \r\n                </div>\r\n                \r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n} export default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' }\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }\r\n  ","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\n\r\nReactDOM.render(\r\n    <Router>\r\n        <Switch>\r\n            <Route path=\"/\" component={App} />\r\n\r\n        </Switch>\r\n    </Router>\r\n    , document.getElementById('root'));\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}